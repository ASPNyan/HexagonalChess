@using HexagonalChess.Game
@using System.Diagnostics.CodeAnalysis
@using System.Text.Json
@inject Games Games
@inject Player Player
@inject IJSRuntime Js

<article class="Board" style="position: absolute; scale: 0.98;
width: 100vmin; right: 5vw; top: 0; display: flex; justify-content: center; align-items: center">
    @for (int file = 0; file < BoardState.Files.Length; file++)
    {
        <div class="File" style="display: flex; flex-flow: column nowrap; justify-content: center; align-items: center; width: calc(100vmin / 9.5);
        height: calc((100vmin / 11) * @_game.BoardState.File(BoardState.Files[file]).Count); transform: translateX(-@(100/7 * file + 20)%); translate: 90% 0;">
            @foreach (var cell in _game.BoardState.File(BoardState.Files[file]))
            {
                try
                {
                    _cellRefs.Add(cell.Coord, null);
                }
                catch (ArgumentException)
                {
                    // Catch recurring cell references.
                }

                <svg style="width: 100%; height: 100%; scale: 1.23;" viewBox="0 0 200 200" @ref="@_cellRefs[cell.Coord]">
                    <polygon points="148,183.138438763306 52,183.138438763306 4,100 52,16.8615612366939 148,16.8615612366939 196,100"
                             style="stroke: none; fill: var(@($"--Board{cell.Color}"));" />
                </svg>
            }
        </div>
    }
</article>

<RenderFragments Fragments="_pieceRendering" />

@code {
    [Parameter, EditorRequired]
    public Guid GameId { get; set; }

    [NotNull] private GameState? _game = null;
    private bool _interactive;

    private Dictionary<string, ElementReference?> _cellRefs = new();

    private List<RenderFragment> _pieceRendering = new();

    private List<RenderFragment> _moveRendering
    {
        get
        {
            //TODO: implement showing of allowed moves.
            return new List<RenderFragment>();
        }
    }

    private List<CellState>? _visibleMoves;
    private PieceState? _activePiece;

    protected override void OnParametersSet()
    {
        if (!Games.ContainsKey(GameId))
            throw new KeyNotFoundException($"The provided {nameof(GameId)} is not a current game.");

        _game = Games[GameId];
        
        _game.AddPlayers(new Player(Guid.Empty, "Example"), new Player(Guid.Empty, "Example"));

        _interactive = Player == _game.Players.Black || Player == _game.Players.White;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        foreach (var (coord, reference) in _cellRefs)
        {
            var activePiece = _game.BoardState[coord].ActivePiece;

            if (activePiece is null) continue;

            var cssCoords = await GetElementCoordinatesAsync(reference!.Value);
            double top = ((JsonElement)cssCoords["top"]).Deserialize<double>();
            double left = ((JsonElement)cssCoords["left"]).Deserialize<double>();

            _pieceRendering.Add(builder =>
            {
                Type pieceType = activePiece.Name switch 
                {
                    "Bishop" => typeof(Bishop),
                    "King" => typeof(King),
                    "Knight" => typeof(Knight),
                    "Pawn" => typeof(Pawn),
                    "Queen" => typeof(Queen),
                    "Rook" => typeof(Rook),
                    _ => typeof(Pawn)
                };
                
                builder.OpenComponent(0, pieceType);
                builder.AddAttribute(1, "PieceState", activePiece);
                builder.AddAttribute(2, "style", $"position: absolute; top: {top}px; left: {left}px; width: calc(100vmin / 18.7); height: calc(100vmin / 18.7); scale: 1.4; translate: 50% 50%;");
                builder.AddAttribute(3, "PathStyle", "scale: 1.2; translate: -3% 0%;");
                builder.AddAttribute(4, "OnClick", OnPieceClick);
                builder.CloseComponent();
            });
        }
        StateHasChanged();
    }

    private void OnPieceClick(PieceState piece)
    {
        if (!_interactive) return;

        if ((Player == _game.Players.White && !piece.IsWhite) || (Player == _game.Players.Black && !piece.IsWhite))
            return;

        _visibleMoves = piece.Name switch
        {
            "Pawn" => _game.CalculatePawnMoves(piece),
            _ => _visibleMoves
        };
    }

    private async Task<Dictionary<string, object>> GetElementCoordinatesAsync(ElementReference elementReference)
        => await Js.InvokeAsync<Dictionary<string, object>>("getCoordinates", elementReference);
}